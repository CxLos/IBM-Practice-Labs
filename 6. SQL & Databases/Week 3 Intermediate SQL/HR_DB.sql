-- DDL statement for table 'HR' database--

DROP DATABASE IF EXISTS ibm7_db;
CREATE DATABASE ibm7_db;

USE ibm7_db;

-- Drop the tables in case they exist

DROP TABLE EMPLOYEES;
DROP TABLE JOB_HISTORY;
DROP TABLE JOBS;
DROP TABLE DEPARTMENTS;
DROP TABLE LOCATIONS;

-- Create the tables

CREATE TABLE EMPLOYEES (
    EMP_ID INT AUTO_INCREMENT NOT NULL,
    F_NAME VARCHAR(15) NOT NULL,
    L_NAME VARCHAR(15) NOT NULL,
    SSN CHAR(9),
    B_DATE DATE,
    SEX CHAR,
    ADDRESS VARCHAR(30),
    JOB_ID CHAR(9),
    SALARY DECIMAL(10,2),
    MANAGER_ID CHAR(9),
    DEP_ID CHAR(9) NOT NULL,
    PRIMARY KEY (EMP_ID)
  );

CREATE TABLE JOB_HISTORY (
    EMPL_ID CHAR(9) NOT NULL,
    START_DATE DATE,
    JOBS_ID CHAR(9) NOT NULL,
    DEPT_ID CHAR(9),
    PRIMARY KEY (EMPL_ID,JOBS_ID)
  );

CREATE TABLE JOBS (
    JOB_IDENT CHAR(9) NOT NULL,
    JOB_TITLE VARCHAR(30) ,
    MIN_SALARY DECIMAL(10,2),
    MAX_SALARY DECIMAL(10,2),
    PRIMARY KEY (JOB_IDENT)
  );

CREATE TABLE DEPARTMENTS (
    DEPT_ID_DEP CHAR(9) NOT NULL,
    DEP_NAME VARCHAR(15) ,
    MANAGER_ID CHAR(9),
    LOC_ID CHAR(9),
    PRIMARY KEY (DEPT_ID_DEP)
  );

CREATE TABLE LOCATIONS (
    LOCT_ID CHAR(9) NOT NULL,
    DEP_ID_LOC CHAR(9) NOT NULL,
    PRIMARY KEY (LOCT_ID,DEP_ID_LOC)
  );

-- LOADING DATA

LOAD DATA LOCAL INFILE './HR_DB CSV Files/Employees.csv' 
INTO TABLE EMPLOYEES
FIELDS TERMINATED BY ',';
-- LINES TERMINATED BY '\n';
-- OPTIONALLY ENCLOSED BY '"';
-- (@EMP_ID, F_NAME, L_NAME, SSN, B_DATE, SEX, ADDRESS, JOB_ID, SALARY, MANAGER_ID, DEP_ID)
-- SET EMP_ID = @EMP_ID;

LOAD DATA LOCAL INFILE './HR_DB CSV Files/JobsHistory.csv' 
INTO TABLE JOB_HISTORY
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE './HR_DB CSV Files/Jobs.csv' 
INTO TABLE JOBS
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE './HR_DB CSV Files/Departments.csv' 
INTO TABLE DEPARTMENTS
FIELDS TERMINATED BY ',';

LOAD DATA LOCAL INFILE './HR_DB CSV Files/Locations.csv' 
INTO TABLE LOCATIONS
FIELDS TERMINATED BY ',';

-- SHOW TABLES

SELECT * FROM EMPLOYEES;
-- SELECT * FROM JOB_HISTORY ORDER BY START_DATE;
-- SELECT * FROM JOBS;
-- SELECT * FROM DEPARTMENTS;
-- SELECT * FROM LOCATIONS;

-- ACTIIVITIES

-- String Patterns --

-- SELECT F_NAME, L_NAME, DEP_ID, B_DATE
-- FROM EMPLOYEES
-- WHERE B_DATE LIKE '197%';
-- WHERE ADDRESS LIKE '%Elgin,IL%';
-- WHERE (SALARY BETWEEN 60000 AND 70000) AND DEP_ID = 5;

-- Sorting --

-- SELECT F_NAME, L_NAME, DEP_ID
-- FROM EMPLOYEES

-- ORDER BY DEP_ID;
-- ORDER BY DEP_ID DESC, L_NAME DESC;

-- Grouping

-- SELECT DEP_ID, COUNT(*)
-- FROM EMPLOYEES
-- GROUP BY DEP_ID;

-- SELECT DEP_ID, COUNT(*), AVG(SALARY)
-- FROM EMPLOYEES
-- GROUP BY DEP_ID;

-- SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
-- FROM EMPLOYEES
-- GROUP BY DEP_ID;

-- SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
-- FROM EMPLOYEES
-- GROUP BY DEP_ID
-- ORDER BY AVG_SALARY;

-- SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
-- FROM EMPLOYEES
-- GROUP BY DEP_ID
-- HAVING count(*) < 4
-- ORDER BY AVG_SALARY;

-- Sub-queries & Nested Selects

-- SELECT AVG(SALARY) FROM EMPLOYEES;
-- SELECT MAX(SALARY) FROM EMPLOYEES;

-- SELECT * FROM EMPLOYEES WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

-- SELECT EMP_ID, SALARY, (SELECT MAX(SALARY) FROM EMPLOYEES) AS MAX_SALARY 
-- FROM EMPLOYEES;

-- SELECT F_NAME, L_NAME FROM EMPLOYEES WHERE B_DATE = (SELECT MIN(B_DATE) FROM EMPLOYEES);

-- SELECT AVG(SALARY) 
-- FROM (SELECT SALARY 
--       FROM EMPLOYEES 
--       ORDER BY SALARY DESC 
--       LIMIT 5) AS SALARY_TABLE;

-- SOURCE HR_DB.SQL;

-- Practice Problems

-- 1. Write a query to find the average salary of the five least-earning employees.

-- SELECT EMP_ID, F_NAME, SALARY FROM EMPLOYEES ORDER BY SALARY DESC; 

-- SELECT AVG(SALARY) AS AVG_SALARY_BOTTOM_5 
-- FROM (SELECT SALARY FROM EMPLOYEES ORDER BY SALARY DESC LIMIT 5) 
-- AS SALARY_TABLE;

-- 2. Write a query to find the records of employees older than the average age of all employees.

-- SELECT EMP_ID, F_NAME, L_NAME , B_DATE FROM EMPLOYEES ORDER BY B_DATE DESC;

-- SELECT AVG(B_DATE) FROM EMPLOYEES;

-- SELECT EMP_ID, F_NAME, L_NAME, B_DATE 
-- FROM EMPLOYEES
-- WHERE B_DATE > (SELECT AVG(B_DATE) FROM EMPLOYEES);

-- 3. From the Job_History table, display the list of Employee IDs, years of service, and average years of service for all entries.

-- SELECT (DATEDIFF(CURRENT_DATE, START_DATE)) AS YEARS_OF_SERVICE FROM JOB_HISTORY;

-- SELECT EMPL_ID, (DATEDIFF(CURRENT_DATE, START_DATE)) AS YEARS_OF_SERVICE, 
-- (SELECT AVG(DATEDIFF(CURRENT_DATE, START_DATE)) FROM JOB_HISTORY) AS AVG_YEARS_SERVICE
-- FROM JOB_HISTORY;

-- SELECT YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE, STARTDATE))) FROM JOB_HISTORY;

-- SELECT EMPL_ID, YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE, STARTDATE))), 
--     (SELECT AVG(YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE, STARTDATE)))) 
--     FROM JOB_HISTORY)
-- FROM JOB_HISTORY;

-- ----------------- Sub-Queries --------------------

-- SELECT * FROM EMPLOYEES WHERE JOB_ID IN (SELECT JOB_IDENT FROM JOBS);

-- SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
-- FROM JOBS
-- WHERE JOB_IDENT IN (select JOB_ID from EMPLOYEES where SALARY > 70000 );

-- select * from employees, Departments;

-- SELECT *
-- FROM EMPLOYEES, JOBS
-- WHERE EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;

-- SELECT *
-- FROM EMPLOYEES E, JOBS J
-- WHERE E.JOB_ID = J.JOB_IDENT;

-- SELECT EMP_ID,F_NAME,L_NAME, JOB_TITLE
-- FROM EMPLOYEES E, JOBS J
-- WHERE E.JOB_ID = J.JOB_IDENT;

-- SELECT E.EMP_ID, E.F_NAME, E.L_NAME, J.JOB_TITLE
-- FROM EMPLOYEES E, JOBS J
-- WHERE E.JOB_ID = J.JOB_IDENT;

-- Practice Problems --

-- 1. Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.

-- SELECT * FROM EMPLOYEES
-- WHERE JOB_ID IN (SELECT JOB_IDENT FROM JOBS WHERE JOB_TITLE = 'Jr. Designer')

-- SELECT *
-- FROM EMPLOYEES E, JOBS J
-- WHERE E.JOB_ID = J.JOB_IDENT AND J.JOB_TITLE= 'Jr. Designer';

-- 2. Retrieve JOB information and a list of employees whose birth year is after 1976.

-- SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
-- FROM JOBS
-- WHERE JOB_IDENT IN (SELECT JOB_ID
--                     FROM EMPLOYEES
--                     WHERE YEAR(B_DATE)>1976 );

-- FROM JOBS J, EMPLOYEES E
-- WHERE E.JOB_ID = J.JOB_IDENT AND YEAR(E.B_DATE)>1976;

-- SELECT EMP_ID, DEPT_ID_DEP FROM EMPLOYEES, DEPARTMENTS;


-- SOURCE HR_DB.SQL;